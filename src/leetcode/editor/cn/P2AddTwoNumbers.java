//ÁªôÂá∫‰∏§‰∏™ ÈùûÁ©∫ ÁöÑÈìæË°®Áî®Êù•Ë°®Á§∫‰∏§‰∏™ÈùûË¥üÁöÑÊï¥Êï∞„ÄÇÂÖ∂‰∏≠ÔºåÂÆÉ‰ª¨ÂêÑËá™ÁöÑ‰ΩçÊï∞ÊòØÊåâÁÖß ÈÄÜÂ∫è ÁöÑÊñπÂºèÂ≠òÂÇ®ÁöÑÔºåÂπ∂‰∏îÂÆÉ‰ª¨ÁöÑÊØè‰∏™ËäÇÁÇπÂè™ËÉΩÂ≠òÂÇ® ‰∏Ä‰Ωç Êï∞Â≠ó„ÄÇ 
//
// Â¶ÇÊûúÔºåÊàë‰ª¨Â∞ÜËøô‰∏§‰∏™Êï∞Áõ∏Âä†Ëµ∑Êù•ÔºåÂàô‰ºöËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®Êù•Ë°®Á§∫ÂÆÉ‰ª¨ÁöÑÂíå„ÄÇ 
//
// ÊÇ®ÂèØ‰ª•ÂÅáËÆæÈô§‰∫ÜÊï∞Â≠ó 0 ‰πãÂ§ñÔºåËøô‰∏§‰∏™Êï∞ÈÉΩ‰∏ç‰ºö‰ª• 0 ÂºÄÂ§¥„ÄÇ 
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•Ôºö(2 -> 4 -> 3) + (5 -> 6 -> 4)
//ËæìÂá∫Ôºö7 -> 0 -> 8
//ÂéüÂõ†Ôºö342 + 465 = 807
// 
// Related Topics ÈìæË°® Êï∞Â≠¶ 
// üëç 5014 üëé 0


package leetcode.editor.cn;

import org.junit.Test;

//JavaÔºö‰∏§Êï∞Áõ∏Âä†
//2020-10-04 13:07:20
public class P2AddTwoNumbers {

    @Test
    public void testResult() {
        //TO TEST
        Solution solution = new P2AddTwoNumbers().new Solution();
    }
    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode() {}
     * ListNode(int val) { this.val = val; }
     * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            if (l1 == null && l2 == null) return l1;
            if (l1 == null) return l2;
            if (l2 == null) return l1;
            ListNode p = l1.next;
            ListNode pre = l1;
            ListNode q = l2.next;
            int val = l1.val + l2.val;
            l1.val = val % 10;
            int ten = val / 10;
            while (p != null && q != null) {
                int num = p.val + q.val + ten;
                p.val = num % 10;
                ten = num / 10;
                p = p.next;
                q = q.next;
                pre = pre.next;
            }
            if (q != null) {
                pre.next = q;
            }
            p = pre.next;
            while (p != null) {
                int num = p.val + ten;
                p.val = num % 10;
                ten = num / 10;
                p = p.next;
                pre = pre.next;
            }
            if (ten != 0) {
                pre.next = new ListNode(ten, null);
            }
            return l1;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}